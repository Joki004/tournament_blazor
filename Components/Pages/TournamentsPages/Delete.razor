@page "/tournaments/delete"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using tournament_blazor.Models.db_manager
@inject IDbContextFactory<tournament_blazor.Data.tournamentDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]
<PageTitle>Delete Tournament</PageTitle>



@if (tournaments is null)
{
    <h1>Delete Tournament </h1>
    <p><em>Loading...</em></p>
}
else


{

    <h1>Delete Tournament : @tournaments.TournamentName</h1>
    <h3>Are you sure you want to delete this tournament?</h3>
    <div class="card">
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-2">Tournament Name</dt>
                <dd class="col-sm-10">@tournaments.TournamentName</dd>

                <dt class="col-sm-2">Is Public</dt>
                <dd class="col-sm-10">@tournaments.IsPublic</dd>

                <dt class="col-sm-2">Number of Teams</dt>
                <dd class="col-sm-10">@tournaments.NumberOfTeams</dd>

                <dt class="col-sm-2">Start Date</dt>
                <dd class="col-sm-10">@tournaments.StartDate.ToShortDateString()</dd>

                <dt class="col-sm-2">End Date</dt>
                <dd class="col-sm-10">@tournaments.EndDate?.ToShortDateString()</dd>
            </dl>

            <button class="btn btn-danger" @onclick="ShowDeleteConfirmation">Delete</button>
            <a href="/tournaments" class="btn btn-secondary">Back to List</a>
        </div>
    </div>

    @if (isConfirmationVisible)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the tournament "<strong>@tournaments.TournamentName</strong>"? This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="DeleteTournaments">Yes, Delete</button>
                        <button class="btn btn-secondary" @onclick="HideDeleteConfirmation">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@if (!string.IsNullOrWhiteSpace(statusMessage))
{
    <div class="alert alert-info mt-3">@statusMessage</div>
}

@code {
    Tournaments? tournaments;
    private bool isConfirmationVisible = false;
    private string statusMessage = string.Empty;

    [SupplyParameterFromQuery]
    public int TournamentID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        tournaments = await context.Tournaments.FirstOrDefaultAsync(m => m.TournamentID == TournamentID);

        if (tournaments is null)
        {
            statusMessage = "Tournament not found.";
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void ShowDeleteConfirmation()
    {
        isConfirmationVisible = true;
    }

    private void HideDeleteConfirmation()
    {
        isConfirmationVisible = false;
    }

    public async Task DeleteTournaments()
    {
        if (tournaments is null)
        {
            statusMessage = "No tournament found to delete.";
            return;
        }

        using var context = await DbFactory.CreateDbContextAsync();

        var roundRobinMatches = await context.RoundRobinMatches
            .Where(rm => rm.TournamentID == tournaments!.TournamentID)
            .ToListAsync();
        if (roundRobinMatches.Any())
        {
            context.RoundRobinMatches.RemoveRange(roundRobinMatches);
        }

        var bracketMatches = await context.BracketMatches
            .Where(bm => bm.TournamentID == tournaments!.TournamentID)
            .ToListAsync();
        if (bracketMatches.Any())
        {
            context.BracketMatches.RemoveRange(bracketMatches);
        }

        var teams = await context.Teams
            .Where(t => t.TournamentID == tournaments!.TournamentID)
            .ToListAsync();
        if (teams.Any())
        {
            context.Teams.RemoveRange(teams);
        }

        context.Tournaments.Remove(tournaments!);

        try
        {
            await context.SaveChangesAsync();
            statusMessage = "Tournament and related entities deleted successfully.";
            NavigationManager.NavigateTo("/tournaments");
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting tournament: {ex.Message}";
            Console.WriteLine(statusMessage);
        }
    }
}
