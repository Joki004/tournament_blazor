@page "/tournamenttypes/delete"

@using Microsoft.EntityFrameworkCore
@using tournament_blazor.Models.db_manager
@inject IDbContextFactory<tournament_blazor.Data.tournamentDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>TournamentTypes</h4>
    <hr />
    @if (tournamenttypes is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TournamentTypeName</dt>
            <dd class="col-sm-10">@tournamenttypes.TournamentTypeName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@tournamenttypes.Description</dd>
        </dl>
        <EditForm method="post" Model="tournamenttypes" OnValidSubmit="DeleteTournamentTypes" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(tournamenttypes is null)">Delete</button> |
            <a href="/tournamenttypes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    TournamentTypes? tournamenttypes;

    [SupplyParameterFromQuery]
    public int TournamentTypeID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        tournamenttypes = await context.TournamentTypes.FirstOrDefaultAsync(m => m.TournamentTypeID == TournamentTypeID);

        if (tournamenttypes is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteTournamentTypes()
    {
        using var context = DbFactory.CreateDbContext();
        context.TournamentTypes.Remove(tournamenttypes!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/tournamenttypes");
    }
}
