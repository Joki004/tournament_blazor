@page "/disciplines/create"

@using Microsoft.EntityFrameworkCore
@using tournament_blazor.Models.db_manager
@inject IDbContextFactory<tournament_blazor.Data.tournamentDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Disciplines</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Disciplines" OnValidSubmit="AddDisciplines" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }
            <div class="mb-3">
                <label for="disciplinename" class="form-label">DisciplineName:</label> 
                <InputText id="disciplinename" @bind-Value="Disciplines.DisciplineName" class="form-control" /> 
                <ValidationMessage For="() => Disciplines.DisciplineName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Disciplines.Description" class="form-control" /> 
                <ValidationMessage For="() => Disciplines.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="playersperteam" class="form-label">PlayersPerTeam:</label> 
                <InputNumber id="playersperteam" @bind-Value="Disciplines.PlayersPerTeam" class="form-control" /> 
                <ValidationMessage For="() => Disciplines.PlayersPerTeam" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/disciplines">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Disciplines Disciplines { get; set; } = new Disciplines();

    public string ErrorMessage { get; set; } = string.Empty;

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddDisciplines()
    {
        using var context = DbFactory.CreateDbContext();
        var existingDiscipline = await context.Disciplines
          .FirstOrDefaultAsync(d => d.DisciplineName == Disciplines.DisciplineName);


        if (existingDiscipline != null)
        {
            // Discipline name already exists, set an error message
            ErrorMessage = "The discipline name already exists. Please choose a different name.";
            return; // Stop the process, do not save the new discipline
        }

        context.Disciplines.Add(Disciplines);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/disciplines");
    }
}
